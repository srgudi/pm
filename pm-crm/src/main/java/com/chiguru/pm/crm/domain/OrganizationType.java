package com.chiguru.pm.crm.domain;

import com.chiguru.pm.core.common.domain.ReadOnlyEntity;

// Generated Jun 9, 2010 9:02:16 PM by Hibernate Tools 3.3.0.GA
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/**
 * OrganizationType generated by hbm2java
 */
@Entity
@Table(name = "organization_type")
public class OrganizationType extends ReadOnlyEntity implements java.io.Serializable {
    //private OrganizationType parentType;
    @ManyToOne(fetch = FetchType.LAZY)
    public static final OrganizationType ORGANIZATION_TYPE_FIRM = new OrganizationType(1);
    public static final OrganizationType ORGANIZATION_TYPE_CLIENT = new OrganizationType(2);
    public static final OrganizationType ORGANIZATION_TYPE_BANK = new OrganizationType(3);
    public static final OrganizationType ORGANIZATION_TYPE_INSURANCE = new OrganizationType(4);
    public static final OrganizationType ORGANIZATION_TYPE_LAW_FIRM = new OrganizationType(5);
    public static final OrganizationType ORGANIZATION_TYPE_TRANSFER_AFENT = new OrganizationType(6);

    //private Integer id;
    private String type;
    private Set<Organization> organizations = new HashSet<Organization>(0);

    public OrganizationType() {
    }

    public OrganizationType(Integer id) {
        this.id = id;
    }

    public OrganizationType(String type, Set<Organization> organizations) {
        this.type = type;
        this.organizations = organizations;
    }

    //	@Id
    //	@GeneratedValue(strategy = IDENTITY)
    //	@Column(name = "id", unique = true, nullable = false)
    //	public Integer getId() {
    //		return this.id;
    //	}
    //
    //	public void setId(Integer id) {
    //		this.id = id;
    //	}
    @Column(name = "type", nullable = false, length = 50)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "organizationType")
    public Set<Organization> getOrganizations() {
        return this.organizations;
    }

    public void setOrganizations(Set<Organization> organizations) {
        this.organizations = organizations;
    }

    /*@JoinColumn(name = "parent_type")
    public OrganizationType getParentType() {
            return parentType;
    }
    
    public void setParentType(OrganizationType parentType) {
            this.parentType = parentType;
    }
    */
}
