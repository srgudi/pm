package com.chiguru.pm.crm.domain;
import com.chiguru.pm.core.common.domain.PersistentEntity;
import org.hibernate.annotations.Cascade;
import org.hibernate.validator.constraints.NotEmpty;
// Generated Jun 22, 2010 4:00:25 PM by Hibernate Tools 3.3.0.GA
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;

/**
 * PartyAccount generated by hbm2java
 */
@Entity
@Table(name = "party_account")
@NamedQueries({@NamedQuery(name = "account.findAccounts_by_party_and_category",query = "select account from PartyAccount account where " +
    "account.party.id =? and account.accountCategory.id =?")
    , @NamedQuery(name = "account.findAccounts_count_by_party_id",query = "select count(account.id) from PartyAccount account where " +
    "account.party.id =? and account.accountCategory.id =? ")
    , @NamedQuery(name = "account.findAccount_by_party_both_id",query = "select party from PartyAccount account where " +
    "account.id =? and account.party.id =? and account.accountCategory.id =?")
})
public class PartyAccount extends PersistentEntity implements java.io.Serializable {
    public static final Long BANK_ACCOUNT_TYPE = 700L;
    public static final Long INSURANCE_ACCOUNT_TYPE = 701L;
    public static final Long LAWYER_ACCOUNT_TYPE = 703L;
    public static final Long TRANSFER_AGENT_ACCOUNT_TYPE = 702L;
    public static final String BANK_ACCOUNT = "Bank Account";
    public static final String INSURANCE_ACCOUNT = "Insurance Account";
    public static final String LAWYER_ACCOUNT = "Lawyer Account";
    public static final String TRANSFER_AGENT_ACCOUNT = "Transfer Agent Account";
    
   
   @Size(min = 0, max = 50)
   @Pattern(regexp = "^[a-zA-Z.\\s]*$")
    private String accountEntityName;

    //private Long id;
   
    private Code accountCategory;

    //private PartySite partySite;
    
    /*@Size(min = 0, max = 50)
    @Pattern(regexp = "^[0-9A-Z-_\\s]*$")*/
    private String accountNumber;

    private Code accountType;
    
    private Party party;
   
    private String terms;
    //  @Valid   // It is commented as it is generating defects due to sever side validation.
    //Issues arise in manageFirm,manageFirmEmployee,firmStaff,clientDetail,officersAndShareholders,clientStaff.
    private Address address;
   
//   @Valid
    private List<PointOfContact> pointOfContactList = new ArrayList<PointOfContact>(0);
    
    public PartyAccount() {
    }

    public PartyAccount(Party party, String accountNumber) {
        this.party = party;
        this.accountNumber = accountNumber;
    }

    public PartyAccount(Party party, String accountNumber, Code accountType) {
        this.party = party;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
    }

    /**
     * @return the accountCategory
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "account_category")
    public Code getAccountCategory() {
        return accountCategory;
    }

    /**
     * @param accountCategory the accountCategory to set
     */
    public void setAccountCategory(Code accountCategory) {
        this.accountCategory = accountCategory;
    }

    @Column(name = "account_entity_name", nullable = true, length = 50)
    public String getAccountEntityName() {
        return accountEntityName;
    }

    /**
     * @param accountCategory the accountCategory to set
     */
    public void setAccountEntityName(String accountEntityName) {
        this.accountEntityName = accountEntityName;
    }

    /**
     * @return the terms
     */
    @Column(name = "terms", nullable = true, length = 2000)
    public String getTerms() {
        return terms;
    }

    /**
     * @param terms the terms to set
     */
    public void setTerms(String terms) {
        this.terms = terms;
    }

    //	@Id
    //	@GeneratedValue(strategy = IDENTITY)
    //	@Column(name = "id", unique = true, nullable = false)
    //	public Long getId() {
    //		return this.id;
    //	}
    //
    //	public void setId(Long id) {
    //		this.id = id;
    //	}
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "address_id")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "party_id", nullable = false)
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        this.party = party;
    }

    @Column(name = "account_number", nullable = false, length = 50)
    public String getAccountNumber() {
        return this.accountNumber;
    }

    public void setAccountNumber(String accountNumber) {
        this.accountNumber = accountNumber;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "account_type")
    public Code getAccountType() {
        return this.accountType;
    }

    public void setAccountType(Code accountType) {
        this.accountType = accountType;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "partyAccount")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public List<PointOfContact> getPointOfContactList() {
        return pointOfContactList;
    }

    public void setPointOfContactList(List<PointOfContact> pointOfContactList) {
        this.pointOfContactList = pointOfContactList;
    }

    @Transient
    public PointOfContact getDefaultPointOfContact() {
        PointOfContact poc = null;

        if (pointOfContactList.size() > 0) {
            poc = this.pointOfContactList.get(0);
        } else {
            poc = new PointOfContact();
            poc.setPartyAccount(this);
            poc.setParty(party);
            this.getPointOfContactList().add(poc);
        }

        return poc;
    }
}
