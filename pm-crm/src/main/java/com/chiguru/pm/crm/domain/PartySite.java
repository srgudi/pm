package com.chiguru.pm.crm.domain;

import com.chiguru.pm.core.common.domain.PersistentEntity;

import org.hibernate.annotations.Cascade;

// Generated Jun 9, 2010 9:02:16 PM by Hibernate Tools 3.3.0.GA
import java.util.ArrayList;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;


/**
 * PartySite generated by hbm2java
 */
@Entity
@Table(name = "party_site")
@NamedQueries({@NamedQuery(name = "partysite.findclients_by_location_n_client_id",query = "select party from PartySite partysite where partysite.id=? and partysite.party.id =?"),
@NamedQuery(name = "partysite.find_the_client_staff", query = "select p from PartySite p where party_id = ? ")
})
public class PartySite extends PersistentEntity implements java.io.Serializable {
//	@NotEmpty
//    @Size(min = 0, max = 50)
//    @Pattern(regexp = "^[a-zA-Z.\\s]*$")
    private String name;

	//@Valid    //It is being commented as issues are being raised in saving a few tabs . 
    private Address address;
	/*@Valid*/
    private Party party;
	/*@Valid*/
    private PartySiteType partySiteType;
    private Boolean identifyingAddressFlag;
    private Integer timezoneId;

    
//    @Size(min = 2, max = 100)
//    @Pattern(regexp = "^[a-zA-Z.\\s]*$")
    private String contactName;
    private String contactTitle;
//   @Valid
    private List<PointOfContact> pointOfContactList = new ArrayList(0);

    public PartySite() {
    }

    //	public PartySite() {
    //		partySiteCommunications = new AutoPopulatingList(PartySiteCommunication.class);
    //	}
    //	
    public PartySite(Address address, Party party, PartySiteType partySiteType) {
        this.address = address;
        this.party = party;
        this.partySiteType = partySiteType;
    }

    public PartySite(Address address, Party party, PartySiteType partySiteType,
        Boolean identifyingAddressFlag, Integer timezoneId,
        List<PointOfContact> pointOfContacts) {
        this.address = address;
        this.party = party;
        this.partySiteType = partySiteType;
        this.identifyingAddressFlag = identifyingAddressFlag;
        this.timezoneId = timezoneId;
        this.pointOfContactList = pointOfContacts;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
        String retString = "";

        if (id != null) {
            retString = id.toString();
        }

        return retString;
    }

    //	@Id
    //	@GeneratedValue(strategy = IDENTITY)
    //	@Column(name = "id", unique = true, nullable = false)
    //	public Long getId() {
    //		return this.id;
    //	}
    //
    //	public void setId(Long id) {
    //		this.id = id;
    //	}
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "address_id")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public Address getAddress() {
        return this.address;
    }

    public void setAddress(Address address) {
        this.address = address;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "party_id")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        this.party = party;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "party_site_type", nullable = false)
    public PartySiteType getPartySiteType() {
        return this.partySiteType;
    }

    public void setPartySiteType(PartySiteType partySiteType) {
        this.partySiteType = partySiteType;
    }

    @Column(name = "identifying_address_flag")
    public Boolean getIdentifyingAddressFlag() {
        return this.identifyingAddressFlag;
    }

    public void setIdentifyingAddressFlag(Boolean identifyingAddressFlag) {
        this.identifyingAddressFlag = identifyingAddressFlag;
    }

    @Column(name = "timezone_id")
    public Integer getTimezoneId() {
        return this.timezoneId;
    }

    public void setTimezoneId(Integer timezoneId) {
        this.timezoneId = timezoneId;
    }

    @Column(name = "contact_name", length = 255)
    public String getContactName() {
        return this.contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    @Column(name = "contact_title", length = 50)
    public String getContactTitle() {
        return this.contactTitle;
    }

    public void setContactTitle(String contactTitle) {
        this.contactTitle = contactTitle;
    }

    @Column(name = "name", length = 255)
    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "partySite")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public List<PointOfContact> getPointOfContactList() {
        return pointOfContactList;
    }

    public void setPointOfContactList(List<PointOfContact> pointOfContactList) {
        this.pointOfContactList = pointOfContactList;
    }

    @Transient
    public PointOfContact getDefaultPointOfContact() {
        PointOfContact poc = null;

        if (pointOfContactList.size() > 0) {
            poc = this.pointOfContactList.get(0);
        } else {
            poc = new PointOfContact();
            poc.setPartySite(this);
            poc.setParty(party);
            this.getPointOfContactList().add(poc);
        }

        return poc;
    }
}
