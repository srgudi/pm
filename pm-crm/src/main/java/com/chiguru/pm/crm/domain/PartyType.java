package com.chiguru.pm.crm.domain;

import com.chiguru.pm.core.common.domain.ReadOnlyEntity;

// Generated Jun 9, 2010 9:02:16 PM by Hibernate Tools 3.3.0.GA
import java.io.Serializable;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/**
 * PartyType generated by hbm2java
 */
@Entity
@Table(name = "party_type")
public class PartyType extends ReadOnlyEntity implements Serializable {
    /**
     *
     */
    private static final long serialVersionUID = 6504050118899006962L;
    public static PartyType PARTY_TYPE_ORGANIZATION = new PartyType(new Integer(
                2));
    public static PartyType PARTY_TYPE_PERSON = new PartyType(new Integer(1));
    private String type;
    private Set<Party> parties = new HashSet<Party>(0);

    public PartyType() {
    }

    public PartyType(Integer id) {
        setId(id);
    }

    public PartyType(Integer id, String type, Set<Party> parties) {
        setId(id);
        this.type = type;
        this.parties = parties;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = (prime * result) + id;

        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        /*if (getClass() != obj.getClass())
                return false;*/
        PartyType other = (PartyType) obj;

        if (getId().intValue() != other.getId().intValue()) {
            return false;
        }

        return true;
    }

    @Column(name = "type", nullable = false, length = 50, insertable = false, updatable = false)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "partyType", cascade = CascadeType.ALL)
    public Set<Party> getParties() {
        return this.parties;
    }

    public void setParties(Set<Party> parties) {
        this.parties = parties;
    }
}
