package com.chiguru.pm.crm.domain;

import java.lang.reflect.Method;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.PrimaryKeyJoinColumn;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.Valid;
import javax.validation.constraints.Pattern;
import javax.validation.constraints.Size;

import org.hibernate.annotations.Cascade;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.LazyToOne;
import org.hibernate.annotations.LazyToOneOption;
import org.hibernate.annotations.Parameter;
import org.hibernate.validator.constraints.NotEmpty;
import static javax.persistence.FetchType.LAZY;


/**
 * Person generated by hbm2java
 */
@Entity
@Table(name = "person")
public class Person implements java.io.Serializable {
private Long id;
    
    @Valid
    private PersonType personType;
    private Party party;
    
   
	@NotEmpty
    @Size(min = 0, max = 50)
    @Pattern(regexp ="^[a-zA-Z\\s\\.]*$")
    private String firstName;
	
	@Size(min = 0, max = 50)
	@Pattern(regexp="^[a-zA-Z\\s]*$")
    private String lastName;
	
    private String middleName;
    
    private String personIdentificationNumber;
    
    private String userName;

    private Date dateOfBirth;
    
    @Valid
    @OneToOne(fetch=LAZY)
    private PersonDetails personDetails;
    public String lastUpdateUserId;
    public Date lastUpdateDate;

    public Person() {
    }

    public Person(PersonType personType, String firstName, String lastName,
        String middleName,String userName) {
        this.personType = personType;
        this.firstName = firstName;
        this.middleName = middleName;
        this.lastName = lastName;
        this.userName = userName;
    }

    public Person(Party party,String userName) {
        this.party = party;
        this.userName = userName;
    }

    public Person(PersonType personType, Party party, String firstName,
        String lastName, String middleName, String personIdentificationNumber,
        Date dateOfBirth,String userName) {
        this.personType = personType;
        this.party = party;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleName = middleName;
        this.personIdentificationNumber = personIdentificationNumber;
        this.dateOfBirth = dateOfBirth;
        this.userName = userName;
    }

    @GenericGenerator(name = "generator", strategy = "foreign", parameters = @Parameter(name = "property", value = "party")
    )
    @Id
    @GeneratedValue(generator = "generator")
    @Column(name = "party_id", unique = true, nullable = false)
    public Long getId() {
        return this.id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "person_type")
    public PersonType getPersonType() {
        return this.personType;
    }

    public void setPersonType(PersonType personType) {
        this.personType = personType;
    }

    @OneToOne(fetch = FetchType.LAZY)
    @PrimaryKeyJoinColumn
    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        this.party = party;
    }

    @Column(name = "first_name", length = 60)
    public String getFirstName() {
        return this.firstName;
    }

    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    @Column(name = "last_name", length = 60)
    public String getLastName() {
        return this.lastName;
    }

    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    @Column(name = "middle_name", length = 60)
    public String getMiddleName() {
        return this.middleName;
    }

    public void setMiddleName(String middleName) {
        this.middleName = middleName;
    }

    @Column(name = "person_identification_number", length = 50)
    public String getPersonIdentificationNumber() {
        return this.personIdentificationNumber;
    }

    public void setPersonIdentificationNumber(String personIdentificationNumber) {
        this.personIdentificationNumber = personIdentificationNumber;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "date_of_birth", length = 10)
    public Date getDateOfBirth() {
        return this.dateOfBirth;
    }

    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    @OneToOne(fetch = FetchType.LAZY, optional=false, mappedBy = "person")
    @Cascade({org.hibernate.annotations.CascadeType.ALL
    })
    @LazyToOne(value = LazyToOneOption.NO_PROXY)
    public PersonDetails getPersonDetails() {
        return this.personDetails;
    }

    public void setPersonDetails(PersonDetails personDetails) {
        this.personDetails = personDetails;
    }
    
    @Column(name = "last_update_user_id", length = 30)
    public String getLastUpdateUserId() {
        return this.lastUpdateUserId;
    }

    public void setLastUpdateUserId(String lastUpdateUserId) {
        this.lastUpdateUserId = lastUpdateUserId;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "last_update_date", length = 19)
    public Date getLastUpdateDate() {
        return this.lastUpdateDate;
    }

    public void setLastUpdateDate(Date lastUpdateDate) {
        this.lastUpdateDate = lastUpdateDate;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj == null) {
            return false;
        }

        if (!(obj instanceof Party || obj instanceof Person)) {
            return false;
        }

        try {
            Class cls = obj.getClass();
            Method met = cls.getMethod("getId");
            Long otherId = (Long) met.invoke(obj);

            if ((id == null) && (otherId != null)) {
                return false;
            } else if (!id.equals(otherId)) {
                return false;
            }
        } catch (Exception e) {
           
            e.printStackTrace();

            return false;
        }

        return true;
    }

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Column(name = "username", length = 250)
	public String getUserName() {
		return userName;
	}
}
