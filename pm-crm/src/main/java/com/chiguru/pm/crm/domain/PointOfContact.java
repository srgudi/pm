package com.chiguru.pm.crm.domain;

import com.chiguru.pm.core.common.domain.PersistentEntity;

import org.hibernate.annotations.Cascade;

import org.springframework.util.AutoPopulatingList;

// Generated Feb 10, 2011 11:10:04 PM by Hibernate Tools 3.3.0.GA
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;



/**
 * PointOfContact generated by hbm2java
 */
@Entity
@Table(name = "point_of_contact")
public class PointOfContact extends PersistentEntity implements java.io.Serializable {
    private PartySite partySite;
    private PartyAccount partyAccount;
    private Party party;
    private String contactName;
    private String contactTitle;
    
//    @Valid
    private List<EmailCommunication> emailList = new AutoPopulatingList(EmailCommunication.class);
  
//    @Valid
    private List<WebCommunication> webUrlList = new AutoPopulatingList(WebCommunication.class);
    
//    @Valid
    private List<FaxCommunication> faxList = new AutoPopulatingList(FaxCommunication.class);
    
//    @Valid
    private List<PhoneCommunication> phoneList = new AutoPopulatingList(PhoneCommunication.class);
    
    
  //  private List<OtherShare> shareList = new AutoPopulatingList(OtherShare.class);

    public PointOfContact() {
    }

    public PointOfContact(PartySite partySite, PartyAccount partyAccount,
        Party party, String contactName, String contactTitle) {
        this.partySite = partySite;
        this.partyAccount = partyAccount;
        this.party = party;
        this.contactName = contactName;
        this.contactTitle = contactTitle;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "party_site_id")
    public PartySite getPartySite() {
        return this.partySite;
    }

    public void setPartySite(PartySite partySite) {
        this.partySite = partySite;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "account_id")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public PartyAccount getPartyAccount() {
        return this.partyAccount;
    }

    public void setPartyAccount(PartyAccount partyAccount) {
        this.partyAccount = partyAccount;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "party_id")
    public Party getParty() {
        return this.party;
    }

    public void setParty(Party party) {
        this.party = party;
    }

    @Column(name = "contact_name", length = 100)
    public String getContactName() {
        return this.contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    @Column(name = "contact_title", length = 50)
    public String getContactTitle() {
        return this.contactTitle;
    }

    public void setContactTitle(String contactTitle) {
        this.contactTitle = contactTitle;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.ALL
    })
    public void addPhone(PhoneCommunication phone) {
        this.phoneList.add(phone);
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.ALL
    })
    public List<EmailCommunication> getEmailList() {
        return emailList;
    }

    public void setEmailList(List<EmailCommunication> emailList) {
        this.emailList = emailList;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.ALL
    })
    public List<WebCommunication> getWebUrlList() {
        return webUrlList;
    }

    public void setWebUrlList(List<WebCommunication> webUrlList) {
        this.webUrlList = webUrlList;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.ALL
    })
    public List<FaxCommunication> getFaxList() {
        return faxList;
    }

    public void setFaxList(List<FaxCommunication> faxList) {
        this.faxList = faxList;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
    public List<PhoneCommunication> getPhoneList() {
        return phoneList;
    }

    public void setPhoneList(List<PhoneCommunication> phoneList) {
        this.phoneList = phoneList;
    }

    public void populateAllCommunications() {
        if (phoneList.isEmpty()) {
            phoneList.add(new PhoneCommunication());
        }

        if (emailList.isEmpty()) {
            emailList.add(new EmailCommunication());
        }

        if (faxList.isEmpty()) {
            faxList.add(new FaxCommunication());
        }

        if (webUrlList.isEmpty()) {
            webUrlList.add(new WebCommunication());
        }
    }

	/*public void setShareList(List<OtherShare> shareList) {
		this.shareList = shareList;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "pointOfContact")
    @Cascade({org.hibernate.annotations.CascadeType.SAVE_UPDATE
    })
	public List<OtherShare> getShareList() {
		return shareList;
	}


	 public void populateAllShares() {
	        if (shareList.isEmpty()) {
	        	shareList.add(new OtherShare());
	        }
	 }*/
}
