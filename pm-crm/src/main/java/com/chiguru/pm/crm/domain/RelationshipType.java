package com.chiguru.pm.crm.domain;

import com.chiguru.pm.core.common.domain.ReadOnlyEntity;

// Generated Jun 13, 2010 8:34:59 PM by Hibernate Tools 3.3.0.GA
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.OneToMany;
import javax.persistence.Table;


/**
 * RelationshipType generated by hbm2java
 */
@Entity
@Table(name = "relationship_type")
public class RelationshipType extends ReadOnlyEntity implements java.io.Serializable {
    public static RelationshipType RELATIONSHIP_TYPE_CLIENT = new RelationshipType(1);
    public static RelationshipType RELATIONSHIP_TYPE_PARTNER = new RelationshipType(2);
    public static RelationshipType RELATIONSHIP_TYPE_STAFF = new RelationshipType(3);
    public static RelationshipType RELATIONSHIP_TYPE_BANK = new RelationshipType(4);
    public static RelationshipType RELATIONSHIP_TYPE_LAWYER = new RelationshipType(5);
    public static RelationshipType RELATIONSHIP_TYPE_INSURANCE_AGENCY = new RelationshipType(6);
    public static RelationshipType RELATIONSHIP_TYPE_SHAREHOLDER = new RelationshipType(7);
    public static RelationshipType RELATIONSHIP_TYPE_TRANSFER_AGENT = new RelationshipType(8);
    public static RelationshipType RELATIONSHIP_TYPE_MAIN_BANK = new RelationshipType(9);
    public static RelationshipType RELATIONSHIP_TYPE_INSURANCE_FIRM = new RelationshipType(10);
    public static RelationshipType RELATIONSHIP_TYPE_TRANSFER_AGENT_FIRM = new RelationshipType(11);
    public static RelationshipType RELATIONSHIP_TYPE_LAW_FIRM = new RelationshipType(12);
    public static RelationshipType RELATIONSHIP_TYPE_LAW_ADMIN = new RelationshipType(13);
    public static RelationshipType RELATIONSHIP_TYPE_CLIENT_STAFF = new RelationshipType(14);
    //	private Integer id;
    private String type;
    private Set<PartyRelationship> partyRelationships = new HashSet<PartyRelationship>(0);

    public RelationshipType() {
    }

    public RelationshipType(Integer id) {
        this.id = id;
    }

    public RelationshipType(Integer id, String type,
        Set<PartyRelationship> partyRelationships) {
        this.id = id;
        this.type = type;
        this.partyRelationships = partyRelationships;
    }

    /*@Id
    @Column(name = "id", unique = true, nullable = false)
    public Integer getId() {
            return this.id;
    }
    
    public void setId(Integer id) {
            this.id = id;
    }
    */
    @Column(name = "type", nullable = false, length = 50)
    public String getType() {
        return this.type;
    }

    public void setType(String type) {
        this.type = type;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "relationshipType")
    public Set<PartyRelationship> getPartyRelationships() {
        return this.partyRelationships;
    }

    public void setPartyRelationships(Set<PartyRelationship> partyRelationships) {
        this.partyRelationships = partyRelationships;
    }
}
