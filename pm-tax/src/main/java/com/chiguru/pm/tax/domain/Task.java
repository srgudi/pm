package com.chiguru.pm.tax.domain;

import com.chiguru.pm.core.common.domain.PersistentEntity;
import com.chiguru.pm.crm.domain.Organization;
import com.chiguru.pm.crm.domain.Party;
import com.chiguru.pm.tax.domain.PaymentType;
// Generated Dec 6, 2010 12:16:20 AM by Hibernate Tools 3.3.0.GA
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.SqlResultSetMapping;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.ColumnResult;
import javax.persistence.Transient;


/**
 * TaxFirmPracticeType generated by hbm2java
 */
@Entity
@Table(name = "task")
@NamedQueries({@NamedQuery(name = "task.findtask_by_task_id",query = "select id from Task where id=?")
    , @NamedQuery(name = "task.findtask_by_id_with_order",query = "select id from Task taskinfo where taskinfo.status.id !=? and taskinfo.firm.id=? order by taskinfo.dueDate")
    , @NamedQuery(name = "task.findtask_count_by_id",query = "select count(id) from Task taskinfo where taskinfo.status.id !=? and taskinfo.firm.id=?")
    , @NamedQuery(name = "task.findtask_staff_in_charge",query = "select taskinfo.staffInCharge from Task taskinfo order by taskinfo.dueDate")
    , @NamedQuery(name = "task.findtask_by_duedate_with_order",query = "select taskinfo.id from Task taskinfo where taskinfo.status.id !=? and taskinfo.staffInCharge.id=? order by taskinfo.dueDate")
    , @NamedQuery(name = "task.findtask_count_by_duedate",query = "select count(taskinfo.id) from Task taskinfo where taskinfo.status.id !=? and taskinfo.staffInCharge.id=?")
    , @NamedQuery(name = "task.findparty_by_task_id",query = "select taskinfo.client from Task taskinfo where taskinfo.id =?")
    , @NamedQuery(name = "task.findtask_by_staff_with_order", query = "from Task taskinfo where taskinfo.status.id !=? and taskinfo.staffInCharge.id=? order by taskinfo.dueDate")
    , @NamedQuery(name = "task.findtasks_for_firm_with_order",query = "from Task taskinfo where taskinfo.status.id !=? and taskinfo.firm.id=? order by taskinfo.dueDate")
})
@NamedNativeQuery(name="task.native_find_task", 
query="select tk.id, tk.filing_type, assignedParty.name as assignedTo from task as tk, party as assignedParty where tk.staff_in_charge = assignedParty.party_id", resultSetMapping="taskList")

@SqlResultSetMapping(name="taskList", 
		columns={
	@ColumnResult(name="id"),
    @ColumnResult(name="filing_type"),
    @ColumnResult(name="assignedTo")
})

//and taskinfo.dueDate between ? and ?  and taskinfo.dueDate between ? and ?
public class Task extends PersistentEntity {
    //private Long id;
    private ClientPracticeInfo taxClientPracticeType;
    private PracticeType practiceId;
    private Organization firm;
//    private Person clientStaffInCharge;
    private Long clientStaffInCharge;
//    private Person staffInCharge;
    private String clientStaffInChargeName;
    private Long staffInCharge;
//    private Person partnerInCharge;
    private String staffInChargeName;
    private Long partnerInCharge;
    private String partnerInChargeName;
    private Party client;
   
	private Date dueDate;
    private TaskStatus status;
    private String taskNote;
    private Date actualCompletionDate;
    SimpleDateFormat sd=new SimpleDateFormat("MM-dd-yyyy");
    private PaymentType paymentType;
    private Integer amountPaid;
    private String chqNo;
    private String acknowledgementNo;
    private Date paidDate;
    
   
    @Transient
    public String getFormattedDate() {
		if(actualCompletionDate!=null && formattedDate==null){
			formattedDate=sd.format(actualCompletionDate);
		}
		return formattedDate;
	}

	public void setFormattedDate(String formattedDate) {
		this.formattedDate = formattedDate;
	}

	private Long filingType;
    private DueDateRule taxInfoDueDateRule;
    private String filingTitle;
    private String formattedDate;
    private String taskType;
    private String taskNoteWithOutTimeStamp;
    private String previousStaff;

    public Task() {
    }

    public Task(ClientPracticeInfo taxClientPracticeType, Organization firm,
        TaskStatus status) {
        this.taxClientPracticeType = taxClientPracticeType;
        this.firm = firm;
        this.status = status;
    }

    /**
     * @return the filingTitle
     */
    @Column(name = "filing_title", nullable = false)
    public String getFilingTitle() {
        return filingTitle;
    }

    /**
     * @param filingTitle the filingTitle to set
     */
    public void setFilingTitle(String filingTitle) {
        this.filingTitle = filingTitle;
    }

    /**
     * @return the practiceId
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "partice_id", nullable = false)
    public PracticeType getPracticeId() {
        return practiceId;
    }

    /**
     * @param practiceId the practiceId to set
     */
    public void setPracticeId(PracticeType practiceId) {
        this.practiceId = practiceId;
    }

//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "client_staff_in_charge")
    
    @Column(name = "client_staff_in_charge")
    public Long getClientStaffInCharge() {
        return this.clientStaffInCharge;
    }

    public void setClientStaffInCharge(Long clientStaffInCharge) {
        this.clientStaffInCharge = clientStaffInCharge;
    }

    
    /**
	 * @return the partnerInCharge
	 */
//    @ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "partner_in_charge")
    
    @Column(name = "partner_in_charge")
	public Long getPartnerInCharge() {
		return partnerInCharge;
	}

	/**
	 * @param partnerInCharge the partnerInCharge to set
	 */
	public void setPartnerInCharge(Long partnerInCharge) {
		this.partnerInCharge = partnerInCharge;
	}

//	@ManyToOne(fetch = FetchType.LAZY)
//    @JoinColumn(name = "staff_in_charge", nullable = false)
    
    @Column(name = "staff_in_charge")
    public Long getStaffInCharge() {
        return this.staffInCharge;
    }

    public void setStaffInCharge(Long staffInCharge) {
        this.staffInCharge = staffInCharge;
    }

    /**
     * @return the filingType
     */

    /*@ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "filing_type", nullable = false)
    public TaxInfoFilingType getFilingType() {
            return filingType;
    }
    
    /**
     * @param filingType the filingType to set
     */

    /*public void setFilingType(TaxInfoFilingType filingType) {
            this.filingType = filingType;
    }*/
    @Column(name = "filing_type", nullable = false)
    public Long getFilingType() {
        return filingType;
    }

    /**
     * @param filingType the filingType to set
     */
    public void setFilingType(Long filingType) {
        this.filingType = filingType;
    }

    @Temporal(TemporalType.DATE)
    @Column(name = "actual_completion_date", length = 10)
    public Date getActualCompletionDate() {
        return actualCompletionDate;
    }

    public void setActualCompletionDate(Date actualCompletionDate) {
        this.actualCompletionDate = actualCompletionDate;
    }

    /**
     * @return the taskNote
     */
    @Column(name = "task_note", length = 10)
    public String getTaskNote() {
        return taskNote;
    }

    /**
     * @param taskNote the taskNote to set
     */
    public void setTaskNote(String taskNote) {
        this.taskNote = taskNote;
    }

    /**
     * @return the taxClientPracticeType
     */

    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "practice_client_info_id", nullable = false)
    public ClientPracticeInfo getTaxClientPracticeType() {
            return taxClientPracticeType;
    }
    /**
     * @param taxClientPracticeType the taxClientPracticeType to set
     */

    public void setTaxClientPracticeType(ClientPracticeInfo taxClientPracticeType) {
            this.taxClientPracticeType = taxClientPracticeType;
    }

    /**
     * @return the organization
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "firm_id")
    public Organization getFirm() {
        return firm;
    }

    /**
     * @param organization the organization to set
     */
    public void setFirm(Organization firm) {
        this.firm = firm;
    }

    /**
     * @return the client
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "customer_id", nullable = false)
    public Party getClient() {
        return client;
    }

    /**
     * @param client the client to set
     */
    public void setClient(Party client) {
        this.client = client;
    }

    /**
     * @return the dueDate
     */
    @Temporal(TemporalType.DATE)
    @Column(name = "due_date", length = 10)
    public Date getDueDate() {
        return dueDate;
    }

    /**
     * @param dueDate the dueDate to set
     */
    public void setDueDate(Date dueDate) {
        this.dueDate = dueDate;
    }

    /**
     * @return the statusId
     */
    @ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "status")
    public TaskStatus getStatus() {
        return status;
    }

    /**
     * @param statusId the statusId to set
     */
    public void setStatus(TaskStatus status) {
        this.status = status;
    }

    public void setTaxInfoDueDateRule(DueDateRule taxInfoDueDateRule) {
        this.taxInfoDueDateRule = taxInfoDueDateRule;
    }

    /**
     * @return the parent date rule
     */
    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "tax_info_date_rule_id")
    public DueDateRule getTaxInfoDueDateRule() {
        return taxInfoDueDateRule;
    }

    @Column(name = "task_type", nullable = false)
	public String getTaskType() {
		return taskType;
	}

	public void setTaskType(String taskType) {
		this.taskType = taskType;
	}

	
	
	 @Transient
	 public String getTaskNoteWithOutTimeStamp() {
		return taskNoteWithOutTimeStamp;
	}

	public void setTaskNoteWithOutTimeStamp(String taskNoteWithOutTimeStamp) {
		this.taskNoteWithOutTimeStamp = taskNoteWithOutTimeStamp;
	}

	 @Transient
	public String getPreviousStaff() {
		return previousStaff;
	}

	public void setPreviousStaff(String previousStaff) {
		this.previousStaff = previousStaff;
	}
	
	@Transient
	 public String getStaffInChargeName() {
		return staffInChargeName;
	}

	public void setStaffInChargeName(String staffInChargeName) {
		this.staffInChargeName = staffInChargeName;
	}

	public void setClientStaffInChargeName(String clientStaffInChargeName) {
		this.clientStaffInChargeName = clientStaffInChargeName;
	}

	@Transient
	public String getClientStaffInChargeName() {
		return clientStaffInChargeName;
	}

	public void setPartnerInChargeName(String partnerInChargeName) {
		this.partnerInChargeName = partnerInChargeName;
	}

	@Transient
	public String getPartnerInChargeName() {
		return partnerInChargeName;
	}

	@ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "payment_id")
	public PaymentType getPaymentType() {
		return paymentType;
	}

	public void setPaymentType(PaymentType paymentType) {
		this.paymentType = paymentType;
	}

	@Column(name = "amount_paid")
	public Integer getAmountPaid() {
		return amountPaid;
	}

	public void setAmountPaid(Integer amountPaid) {
		this.amountPaid = amountPaid;
	}

	@Column(name = "ack_no")
	public String getAcknowledgementNo() {
		return acknowledgementNo;
	}

	public void setAcknowledgementNo(String acknowledgementNo) {
		this.acknowledgementNo = acknowledgementNo;
	}

	@Column(name = "chq_no")
	public String getChqNo() {
		return chqNo;
	}

	public void setChqNo(String chqNo) {
		this.chqNo = chqNo;
	}

	@Temporal(TemporalType.DATE)
    @Column(name = "paid_date", length = 10)
	public Date getPaidDate() {
		return paidDate;
	}

	public void setPaidDate(Date paidDate) {
		this.paidDate = paidDate;
	}

	


    /**
     * @return the practiceId
     */

    /*@ManyToOne(fetch = FetchType.EAGER)
    @JoinColumn(name = "practice_id", nullable = false)
    public PracticeType getPracticeId() {
            return practiceId;
    }
    
    /**
     * @param practiceId the practiceId to set
     */

    /*public void setPracticeId(PracticeType practiceId) {
            this.practiceId = practiceId;
    }*/
}
